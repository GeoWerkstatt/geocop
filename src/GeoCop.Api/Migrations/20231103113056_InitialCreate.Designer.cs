// <auto-generated />
using System;
using GeoCop.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeoCop.Api.Migrations
{
    [DbContext(typeof(DeliveryContext))]
    [Migration("20231103113056_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeoCop.Api.Models.Asset", b =>
                {
                    b.Property<string>("FileHash")
                        .HasColumnType("text");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<Guid>("DeliveryId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SanitizedFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileHash");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeclaringUserIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeclaringUserIdentifier");

                    b.HasIndex("OperatId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Operat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("FileTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geometry>("SpatialExtent")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("Operate");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Organisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("GeoCop.Api.Models.User", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OperatOrganisation", b =>
                {
                    b.Property<string>("OperateId")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationsId")
                        .HasColumnType("text");

                    b.HasKey("OperateId", "OrganisationsId");

                    b.HasIndex("OrganisationsId");

                    b.ToTable("OperatOrganisation");
                });

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.Property<string>("OrganisationsId")
                        .HasColumnType("text");

                    b.Property<string>("UsersIdentifier")
                        .HasColumnType("text");

                    b.HasKey("OrganisationsId", "UsersIdentifier");

                    b.HasIndex("UsersIdentifier");

                    b.ToTable("OrganisationUser");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Asset", b =>
                {
                    b.HasOne("GeoCop.Api.Models.Delivery", "Delivery")
                        .WithMany("Assets")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Delivery", b =>
                {
                    b.HasOne("GeoCop.Api.Models.User", "DeclaringUser")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeclaringUserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoCop.Api.Models.Operat", "Operat")
                        .WithMany("Deliveries")
                        .HasForeignKey("OperatId");

                    b.Navigation("DeclaringUser");

                    b.Navigation("Operat");
                });

            modelBuilder.Entity("OperatOrganisation", b =>
                {
                    b.HasOne("GeoCop.Api.Models.Operat", null)
                        .WithMany()
                        .HasForeignKey("OperateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoCop.Api.Models.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.HasOne("GeoCop.Api.Models.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoCop.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoCop.Api.Models.Delivery", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("GeoCop.Api.Models.Operat", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("GeoCop.Api.Models.User", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
